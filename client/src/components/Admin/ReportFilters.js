import { useState, useEffect } from "react";
import axios from "axios";

const BASE = "http://localhost:8081";

const reportTypes = [
  // –§–∏–Ω–∞–Ω—Å—ã
  { id: 'financeSummary', name: 'üìà –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞' },
  { id: 'financeTaxes', name: 'üßæ –ù–∞–ª–æ–≥–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º' },
  { id: 'financePaymentMethods', name: 'üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã' },
  { id: 'canceledOrders', name: '‚ùå –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã' },

  // –°–∫–ª–∞–¥
  { id: 'currentStock', name: 'üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ' },
  { id: 'slowMoving', name: 'üê¢ –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã' },
  { id: 'inventoryTurnover', name: 'üîÅ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞' },
  { id: 'inventoryChanges', name: 'üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤' },

  // –ü—Ä–æ–¥–∞–∂–∏ –∏ –∫–ª–∏–µ–Ω—Ç—ã
  { id: 'topProducts', name: 'üî• –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤' },
  { id: 'salesByCategory', name: 'üìÇ –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º' },
  { id: 'ltv', name: 'üßë‚Äçüíº LTV –∫–ª–∏–µ–Ω—Ç–∞' },
  { id: 'loyaltyUsage', name: 'üéØ –ë–æ–Ω—É—Å—ã –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å' },

  // –ê–∫—Ü–∏–∏
  { id: 'promotionEffectiveness', name: 'üìâ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–∏' },
  { id: 'promotionOrders', name: 'üõç –ó–∞–∫–∞–∑—ã —Å –∞–∫—Ü–∏—è–º–∏' },
  { id: 'promotionRevenueDelta', name: 'üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ (—Å–∫–∏–¥–∫–∏)' },

  // –ü—Ä–æ–≥–Ω–æ–∑—ã
  { id: 'forecastSales', name: 'üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä—É' },
  { id: 'forecastWarehouseLoad', name: 'üèó –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–∞' },
  { id: 'forecastRevenueGrowth', name: 'üìä –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—Ä—É—á–∫–∏' },
];

export default function ReportFilters({ onChangeType, onChangeFilters, onSubmit }) {
  const [type, setType] = useState('financeSummary');
  const [localFilters, setLocalFilters] = useState({});
  const [warehouses, setWarehouses] = useState([]);
  const [users, setUsers] = useState([]);
  const [promotions, setPromotions] = useState([]);
  const [products, setProducts] = useState([]);

  useEffect(() => {
    axios.get(`${BASE}/warehouses`).then(res => setWarehouses(res.data));
    axios.get(`${BASE}/users`).then(res => setUsers(res.data));
    axios.get(`${BASE}/promotions`).then(res => setPromotions(res.data));
    axios.get(`${BASE}/products`).then(res => setProducts(res.data));
  }, []);

  const handleTypeChange = (e) => {
    const newType = e.target.value;
    setType(newType);
    onChangeType(newType);
    setLocalFilters({});
    onChangeFilters({});
  };

  const handleFilterChange = (field) => (e) => {
    const value = e.target.value;
    const updated = { ...localFilters, [field]: value };
    setLocalFilters(updated);
    onChangeFilters(updated);
  };

  return (
    <div className="bg-white p-6 rounded-xl shadow-md w-full mb-6 space-y-4">
      <div className="flex flex-wrap items-center gap-4">
        <select
          className="p-3 border border-gray-300 rounded-lg shadow-sm focus:ring focus:ring-indigo-200"
          value={type}
          onChange={handleTypeChange}
        >
          {reportTypes.map(r => (
            <option key={r.id} value={r.id}>{r.name}</option>
          ))}
        </select>

        {['financeSummary', 'financeTaxes', 'financePaymentMethods', 'canceledOrders', 'inventoryChanges', 'topProducts', 'salesByCategory', 'forecastRevenueGrowth'].includes(type) && (
          <>
            <input
              type="date"
              value={localFilters.startDate || ''}
              onChange={handleFilterChange('startDate')}
              className="p-3 border border-gray-300 rounded-lg shadow-sm"
            />
            <input
              type="date"
              value={localFilters.endDate || ''}
              onChange={handleFilterChange('endDate')}
              className="p-3 border border-gray-300 rounded-lg shadow-sm"
            />
          </>
        )}

        {type === 'slowMoving' && (
          <div className="flex flex-col">
            <label className="text-sm text-gray-600">–ü–æ—Ä–æ–≥ (–¥–Ω–µ–π)</label>
            <input
              type="number"
              className="p-3 border border-gray-300 rounded-lg shadow-sm"
              defaultValue={90}
              onChange={handleFilterChange('thresholdDays')}
            />
          </div>
        )}

        {['inventoryTurnover', 'forecastWarehouseLoad'].includes(type) && (
          <select
            onChange={handleFilterChange('warehouseId')}
            className="p-3 border border-gray-300 rounded-lg shadow-sm"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥</option>
            {warehouses.map(w => <option key={w._id} value={w._id}>{w.name}</option>)}
          </select>
        )}

        {type === 'ltv' && (
          <select
            onChange={handleFilterChange('userId')}
            className="p-3 border border-gray-300 rounded-lg shadow-sm"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</option>
            {users.map(u => <option key={u._id} value={u._id}>{u.email || u.name}</option>)}
          </select>
        )}

        {type === 'promotionEffectiveness' && (
          <select
            onChange={handleFilterChange('promotionId')}
            className="p-3 border border-gray-300 rounded-lg shadow-sm"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é</option>
            {promotions.map(p => <option key={p._id} value={p._id}>{p.name}</option>)}
          </select>
        )}

        {type === 'forecastSales' && (
          <select
            onChange={handleFilterChange('productId')}
            className="p-3 border border-gray-300 rounded-lg shadow-sm"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä</option>
            {products.map(p => <option key={p._id} value={p._id}>{p.name}</option>)}
          </select>
        )}
      </div>

      <button
        onClick={onSubmit}
        className="bg-indigo-600 px-6 py-3 rounded-lg shadow hover:bg-indigo-700 transition"
      >
        üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç
      </button>
    </div>
  );
}

